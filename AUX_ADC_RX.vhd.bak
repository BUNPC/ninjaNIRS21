-- Create Date: 15:25:23 01/11/2019
-- Interface for LTC2368-24 ADC

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;

entity AUX_ADC_RX is
	port(
		ClkxCI : in std_logic;
		ResetxRI : in std_logic;
		SClrxSI : in std_logic;
		
		CSnxSO	: out std_logic;
		SDOxDI	: in std_logic;
		SCLKxSO	: out std_logic;
		
		PDataxDO	: out std_logic_vector(31 downto 0);
		NSmpsAvxDO : out std_logic_vector(7 downto 0);
		PDataRdReqxSI : in std_logic
	);
end AUX_ADC_RX;

architecture Behavioral of AUX_ADC_RX is
	constant CLK_PERIODS_PER_CONV : integer := 625;
	constant CLK_PERIODS_PER_SCK : integer := 10;
	constant N_FPGA_CONV_AVG : integer := 16;
	
	signal ClkCntxDP, ClkCntxDN	: integer range 0 to CLK_PERIODS_PER_CONV-1;
	signal SckClkCntxDP, SckClkCntxDN: integer range 0 to CLK_PERIODS_PER_SCK-1;
	signal ConvCntxDP, ConvCntxDN	: integer range 0 to N_FPGA_CONV_AVG;
	signal BitsCntxDP, BitsCntxDN	: integer range 0 to 15;
	
	type fsmstatetype is (sCShigh, sPostCShigh, sSCLKlow, sAcq, sSCLKhigh, sReadComplete, sFIFOWrite, sIdle);
	signal StatexDP, StatexDN : fsmstatetype;	
	attribute syn_encoding : string;
	attribute syn_encoding of fsmstatetype : type is "safe";
	
	signal ADCSregxDP, ADCSregxDN : unsigned(11 downto 0);
	signal ADCAccxDP, ADCAccxDN : unsigned(15 downto 0);
	signal FIFOWrReqxS : std_logic;
	signal PDataxD : std_logic_vector(31 downto 0);
	
	
	COMPONENT AUX_ADC_RX_FIFO
	PORT(
		clock		: IN STD_LOGIC ;
		data		: IN STD_LOGIC_VECTOR (31 DOWNTO 0);
		rdreq		: IN STD_LOGIC ;
		sclr		: IN STD_LOGIC ;
		wrreq		: IN STD_LOGIC ;
		empty		: OUT STD_LOGIC ;
		full		: OUT STD_LOGIC ;
		q		: OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
		usedw		: OUT STD_LOGIC_VECTOR (7 DOWNTO 0)
	);
	END COMPONENT;
	

begin

	
	p_memzing : process (ClkxCI, ResetxRI)
	begin
      if (rising_edge(ClkxCI)) then
         if (ResetxRI = '1') then
				ClkCntxDP <= 0;
				SckClkCntxDP <= 0;
				ConvCntxDP <= 0;
				StatexDP <= sCShigh;
				BitsCntxDP <= 0;
				ADCAccxDP <= (others => '0');
         else
				ClkCntxDP <= ClkCntxDN;
				SckClkCntxDP <= SckClkCntxDN;
				ConvCntxDP <= ConvCntxDN;
				StatexDP <= StatexDN;
				BitsCntxDP <= BitsCntxDN;
				ADCAccxDP <= ADCAccxDN;
         end if;   
			ADCSregxDP <= ADCSregxDN;
      end if;
   end process;
   
	p_memless_out_decode : process(StatexDP, ClkCntxDP, SckClkCntxDP, BitsCntxDP, ConvCntxDP, SDOxDI, ADCAccxDP, ADCSregxDP)
	begin
		CSnxSO <= '0';
		SCLKxSO <= '1';
		FIFOWrReqxS <= '0';
		ClkCntxDN <= ClkCntxDP+1;
		SckClkCntxDN <= 0;
		ADCAccxDN <= ADCAccxDP;
		ADCSregxDN <= ADCSregxDP;
		BitsCntxDN <= BitsCntxDP;
		ConvCntxDN <= ConvCntxDP;
		case StatexDP is
			when sCShigh =>
				CSnxSO <= '1';
				BitsCntxDN <= 0;
				if SckClkCntxDP < CLK_PERIODS_PER_SCK-1 then
					SckClkCntxDN <= SckClkCntxDP +1;
				end if;
			when sPostCShigh =>
			when sSCLKlow =>
				SCLKxSO <= '0';
				if SckClkCntxDP < (CLK_PERIODS_PER_SCK/2)-2 then
					SckClkCntxDN <= SckClkCntxDP +1;
				end if;
			when sAcq =>
				SCLKxSO <= '0';
				if BitsCntxDP >= 3 and BitsCntxDP <= 14 then
					ADCSregxDN <= shift_left(ADCSregxDP,1);
					ADCSregxDN(0) <= SDOxDI;
				end if;
				BitsCntxDN <= BitsCntxDP +1;
			when sSCLKhigh =>
				if SckClkCntxDP < (CLK_PERIODS_PER_SCK/2)-1 then
					SckClkCntxDN <= SckClkCntxDP +1;
				end if;
				
			when sReadComplete =>
				ADCAccxDN <= ADCAccxDP + resize(ADCSregxDP,ADCAccxDP'length);
				ConvCntxDN <= ConvCntxDP +1;
				BitsCntxDN <= 0;
				
			when sFIFOWrite =>
				FIFOWrReqxS <= '1';
				ConvCntxDN <= 0;
				ADCAccxDN <= (others => '0');
				
			when sIdle =>
				CSnxSO <= '1';
				BitsCntxDN <= 0;
				if ClkCntxDP >= CLK_PERIODS_PER_CONV-1 then
					ClkCntxDN <= 0;
				end if;
			when others =>
		end case;
   end process;
   
	p_memless_next_state_decode : process (StatexDP, BitsCntxDP, ClkCntxDP, SckClkCntxDP, ConvCntxDP)
	begin
		StatexDN <= StatexDP;
		case StatexDP is
			when sCShigh =>
				if SckClkCntxDP >= CLK_PERIODS_PER_SCK-1 then
					StatexDN <= sPostCShigh;
				end if;
			when sPostCShigh =>
				StatexDN <= sSCLKlow;
			when sSCLKlow =>
				if SckClkCntxDP >= (CLK_PERIODS_PER_SCK/2)-2 then
					StatexDN <= sAcq;
				end if;
			when sAcq =>
				StatexDN <= sSCLKhigh;
			when sSCLKhigh =>
				if BitsCntxDP >= 15 then
					StatexDN <= sReadComplete;
				elsif SckClkCntxDP >= (CLK_PERIODS_PER_SCK/2)-1 then
					StatexDN <= sSCLKlow;
				end if;

			when sReadComplete =>
				if ConvCntxDP >= N_FPGA_CONV_AVG-1 then
					StatexDN <= sFIFOWrite;
				else
					StatexDN <= sIdle;
				end if;
			when sFIFOWrite =>
				StatexDN <= sIdle;
			when sIdle =>
				if ClkCntxDP >= CLK_PERIODS_PER_CONV-1 then
					StatexDN <= sCShigh;
				end if;
			when others =>
				StatexDN <= sIdle;
		end case;	
   end process;
	
	PDataxD(15 downto 0) <= std_logic_vector(ADCAccxDP);
	PDataxD(31 downto 16) <= (others => '0');
	
	AUX_ADC_RX_FIFO_inst : AUX_ADC_RX_FIFO 
	PORT MAP (
		clock	 => ClkxCI,
		data	 => PDataxD,
		rdreq	 => PDataRdReqxSI,
		sclr	 => SClrxSI,
		wrreq	 => FIFOWrReqxS,
		empty	 => open,
		full	 => open,
		q	 	 => PDataxDO,
		usedw	 => NSmpsAvxDO
	);
end Behavioral;